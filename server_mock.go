// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/server/repository.go

// Package server is a generated GoMock package.
package server

import (
	context "context"
	http "net/http"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v4 "github.com/labstack/echo/v4"
)

// MockServerRepo is a mock of ServerRepo interface.
type MockServerRepo struct {
	ctrl     *gomock.Controller
	recorder *MockServerRepoMockRecorder
}

// MockServerRepoMockRecorder is the mock recorder for MockServerRepo.
type MockServerRepoMockRecorder struct {
	mock *MockServerRepo
}

// NewMockServerRepo creates a new mock instance.
func NewMockServerRepo(ctrl *gomock.Controller) *MockServerRepo {
	mock := &MockServerRepo{ctrl: ctrl}
	mock.recorder = &MockServerRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServerRepo) EXPECT() *MockServerRepoMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockServerRepo) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockServerRepoMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockServerRepo)(nil).Close))
}

// GetEcho mocks base method.
func (m *MockServerRepo) GetEcho() *v4.Echo {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEcho")
	ret0, _ := ret[0].(*v4.Echo)
	return ret0
}

// GetEcho indicates an expected call of GetEcho.
func (mr *MockServerRepoMockRecorder) GetEcho() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEcho", reflect.TypeOf((*MockServerRepo)(nil).GetEcho))
}

// GetRouters mocks base method.
func (m *MockServerRepo) GetRouters() []*Route {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRouters")
	ret0, _ := ret[0].([]*Route)
	return ret0
}

// GetRouters indicates an expected call of GetRouters.
func (mr *MockServerRepoMockRecorder) GetRouters() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRouters", reflect.TypeOf((*MockServerRepo)(nil).GetRouters))
}

// GracefulShutdown mocks base method.
func (m *MockServerRepo) GracefulShutdown() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GracefulShutdown")
	ret0, _ := ret[0].(error)
	return ret0
}

// GracefulShutdown indicates an expected call of GracefulShutdown.
func (mr *MockServerRepoMockRecorder) GracefulShutdown() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GracefulShutdown", reflect.TypeOf((*MockServerRepo)(nil).GracefulShutdown))
}

// NewContext mocks base method.
func (m *MockServerRepo) NewContext(req *http.Request, w http.ResponseWriter) Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewContext", req, w)
	ret0, _ := ret[0].(Context)
	return ret0
}

// NewContext indicates an expected call of NewContext.
func (mr *MockServerRepoMockRecorder) NewContext(req, w interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewContext", reflect.TypeOf((*MockServerRepo)(nil).NewContext), req, w)
}

// RegisterRouters mocks base method.
func (m *MockServerRepo) RegisterRouters(group Kind, routers *RegisterRouters, middlewares ...MiddlewareFunc) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{group, routers}
	for _, a := range middlewares {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RegisterRouters", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterRouters indicates an expected call of RegisterRouters.
func (mr *MockServerRepoMockRecorder) RegisterRouters(group, routers interface{}, middlewares ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{group, routers}, middlewares...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterRouters", reflect.TypeOf((*MockServerRepo)(nil).RegisterRouters), varargs...)
}

// Shutdown mocks base method.
func (m *MockServerRepo) Shutdown(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Shutdown", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Shutdown indicates an expected call of Shutdown.
func (mr *MockServerRepoMockRecorder) Shutdown(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Shutdown", reflect.TypeOf((*MockServerRepo)(nil).Shutdown), ctx)
}

// Start mocks base method.
func (m *MockServerRepo) Start() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Start")
}

// Start indicates an expected call of Start.
func (mr *MockServerRepoMockRecorder) Start() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockServerRepo)(nil).Start))
}
